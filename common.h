/*
 * Created by Qt Creator 4.11.0 @ 27 Feb 2021 17:02:33
 *
 * Project: GB_CppBasics
 * File: common.h
 *
 * Author: Sergey Lola
 */
#pragma once

#include <cstdint>
#include <vector>
#include <type_traits>

// ---------------------------------------------------------------------------
// вспомогательный макрос для удаления предупреждения об неиспользуемой
// переменной
#undef UNUSED
#define UNUSED(X) (void)(X);

// ---------------------------------------------------------------------------
// вспомогательный макрос показывающий что переменная передается по ссылке
#undef OUT
#define OUT

// ---------------------------------------------------------------------------
// вспомогательная шаблонная функция для преобразования перечисления в POD-тип
template <class E, class = std::enable_if_t<std::is_enum<E>{}>>
std::underlying_type_t<E> enum2Val(E const & e) {
  return static_cast<std::underlying_type_t<E>>(e);
}

// ---------------------------------------------------------------------------
// перечисление описывающее состояние игровой ячейки
enum class Cell : int8_t {
  EMPTY = ' ',
  ZERO = 'O',
  CROSS = 'X'
};

// ---------------------------------------------------------------------------
// перечисление описывающее текущего игрока
enum class Player {
  Undefined,
  Human,
  AI
};

#pragma pack(push, 1)
// ---------------------------------------------------------------------------
// описание структуры точки на игровом поле
struct Point {
  int8_t x {0};
  int8_t y {0};
};

// ---------------------------------------------------------------------------
// описание структуры игрового поля
struct Field {
  // минимально возможный размер игрового поля по горизонтали или вертикали
  static const int8_t MIN_SIZE {3};
  // максимально возможный размер игрового поля по горизонтали или вертикали
  static const int8_t MAX_SIZE {7};

  // текущая ширина поля
  int8_t width {0};
  // текущая высота поля
  int8_t height {0};
  // необходимое кол-во повторяющихся символов необходимых для победы
  int8_t winCombo {0};
  // максимальное число ходов
  int8_t turnsLimit {0};
  // номер текущего хода
  int8_t currentTurn {0};
  // символы которыми ходит игрок
  Cell humanSign {Cell::EMPTY};
  // символы которыми ходит компьютер
  Cell aiSign { Cell::EMPTY };
  // игровое поле
  std::vector<Cell> cells;
  // кто ходит на данный момент (игрок или компьютер)
  Player currentPlayer {Player::Undefined};
};
#pragma pack(pop)
