/*
 * Created by Qt Creator 4.11.0 @ 08 Feb 2021 21:03:13
 *
 * Project: GB_CppBasics/lib
 * File: hw.cpp
 *
 * Author: Sergey Lola
 */

#include "hw.h"

#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>

using namespace std;

// ---------------------------- LOCAL VARIABLES ------------------------------
const auto TASK1_RANGE {std::make_pair(10, 20)};
const auto TASK2_MAGIC_NUM {10};

namespace lib {
// ---------------------------------------------------------------------------
// ЗАДАНИЕ 1: Написать программу, проверяющую что сумма двух (введенных с
// клавиатуры) чисел лежит в пределах от 10 до 20 (включительно), если да –
// вывести строку "true", в противном случае – "false".
bool task1(int numA, int numB)
{
  const int sum = numA + numB;
  return (sum >= TASK1_RANGE.first) && (sum <= TASK1_RANGE.second);
}

// ---------------------------------------------------------------------------
// ЗАДАНИЕ 2: Написать программу, выводящую на экран строку “true”, если две
// целочисленные константы, объявленные в её начале либо обе равны десяти сами
// по себе, либо их сумма равна десяти. Иначе "false".
bool task2(int numA, int numB)
{
  return (((TASK2_MAGIC_NUM == numA) && (TASK2_MAGIC_NUM == numB)) ||
          (TASK2_MAGIC_NUM == numA + numB));
}

// ---------------------------------------------------------------------------
// ЗАДАНИЕ 3: Написать программу которая выводит на экран список всех нечетных
// чисел от 1 до 50. Например: "Your numbers: 1 3 5 7 9 11 13 …". Для решения
// используйте любой С++ цикл.
void task3(int min, int max, string &res)
{
  res.assign(string("Your numbers: "));
  // "грубый" подсчет необходимого размера памяти под строку
  res.reserve(size_t(max - min) * 2u);
  // если число четное, то отстчет начинаем с ближайшего нечетного
  if (!(min % 2))
  {
    min++;
  } 
  for (int n = min; n <= max; n += 2)
  {
    res.append(to_string(n) + ' ');
  }
  res.shrink_to_fit();
}

// ---------------------------------------------------------------------------
// ЗАДАНИЕ 4: Написать программу, проверяющую, является ли некоторое число -
// простым. Простое число — это целое положительное число, которое делится без
// остатка только на единицу и себя само.
bool task4(int num) {
  bool isPrime = true;
  const size_t upper_limit = static_cast<size_t>(std::sqrt(static_cast<double>(num))) + 1;
  for (size_t i = 2; i != upper_limit; ++i) {
    if (!(num % i)) {
      isPrime = false;
      break;
    }
  }
  return isPrime;
}

// ---------------------------------------------------------------------------
// ЗАДАНИЕ 5: Пользователь вводит с клавиатуры число (год): от 1 до 3000.
// Написать программу, которая определяет является ли этот год високосным.
// Каждый 4-й год является високосным, кроме каждого 100-го, при этом каждый
// 400-й – високосный.
bool task5(int year)
{
  // проверяем условие, что каждый 4-й год является искомым
  const bool test1 = (year & 0x3) == 0;
  // проверяем условие, что каждый 100-й год исключается
  const bool test2 = (year % 25) != 0;
  // проверяем условие, что каждый 400-й год тоже является искомым
  const bool test3 = (year % 0xf) == 0;

  return (test1 && (test2 || test3));
}

} // namespace lib
